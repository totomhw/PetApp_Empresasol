@model IEnumerable<PetApp_Empresa.Models.Accesorio>

@{
    ViewData["Title"] = "Tienda de Accesorios";
}

<h2>@ViewData["Title"]</h2>

<!-- Carrito en la esquina superior derecha -->
<div style="position: relative;">
    <a href="@Url.Action("ResumenCarrito", "CarritoDeCompras")" style="position: absolute; top: 0; right: 0; text-decoration: none;">
        <span id="carrito-icono" class="btn btn-primary">
            Carrito <span id="carrito-count">0</span>
        </span>
    </a>
</div>

<hr />

<div class="row">
    @foreach (var accesorio in Model)
    {
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@accesorio.Nombre</h5>
                    <p class="card-text">@accesorio.Descripcion</p>
                    <p><strong>Precio:</strong> @accesorio.Precio.ToString("C")</p>
                    <p><strong>Disponible:</strong> <span id="stock-@accesorio.AccesorioId">@accesorio.CantidadDisponible</span></p>

                    <div class="input-group">
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-outline-secondary" onclick="ajustarCantidad(@accesorio.AccesorioId, -1)">-</button>
                        </span>
                        <input type="text" id="cantidad-@accesorio.AccesorioId" class="form-control text-center" value="0" readonly>
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-outline-secondary" onclick="ajustarCantidad(@accesorio.AccesorioId, 1)">+</button>
                        </span>
                    </div>

                    <button class="btn btn-success mt-2" onclick="agregarAlCarrito(@accesorio.AccesorioId)">Agregar al carrito</button>
                </div>
            </div>
        </div>
    }
</div>

<!-- Token antifalsificación -->
<form id="antiForgeryForm" method="post" style="display:none;">
    @Html.AntiForgeryToken()
</form>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        // Solicitar el número de elementos únicos en el carrito
        fetch('/CarritoDeCompras/ObtenerCantidadElementosCarrito')
            .then(response => response.json())
            .then(data => {
                const carritoCount = document.getElementById("carrito-count");
                carritoCount.innerText = data.cantidad; // Mostrar el número de elementos únicos
            })
            .catch(error => console.error('Error al cargar el número de elementos únicos en el carrito:', error));
    });

    // Función para ajustar la cantidad
    function ajustarCantidad(accesorioId, delta) {
        const cantidadInput = document.getElementById(`cantidad-${accesorioId}`);
        let cantidad = parseInt(cantidadInput.value);
        cantidad = Math.max(0, cantidad + delta);
        cantidadInput.value = cantidad;
    }

    // Función para agregar al carrito
    function agregarAlCarrito(accesorioId) {
        const cantidad = parseInt(document.getElementById(`cantidad-${accesorioId}`).value);
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        if (cantidad > 0) {
            fetch(`/CarritoDeCompras/AgregarAlCarrito?accesorioId=${accesorioId}&cantidad=${cantidad}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                }
            }).then(response => {
                if (response.ok) {
                    alert('Producto añadido al carrito');

                    // Actualizar el contador de elementos únicos en el carrito
                    fetch('/CarritoDeCompras/ObtenerCantidadElementosCarrito')
                        .then(response => response.json())
                        .then(data => {
                            const carritoCount = document.getElementById("carrito-count");
                            carritoCount.innerText = data.cantidad; // Mostrar número actualizado
                        });

                    document.getElementById(`cantidad-${accesorioId}`).value = 0;

                    // Actualizar stock visualmente después de agregar al carrito
                    const stockElement = document.getElementById(`stock-${accesorioId}`);
                    let nuevoStock = parseInt(stockElement.innerText) - cantidad;
                    stockElement.innerText = nuevoStock >= 0 ? nuevoStock : "Out of stock";

                    if (nuevoStock <= 0) {
                        alert("Este producto está agotado.");
                    }
                } else {
                    response.json().then(data => {
                        alert('Error al añadir el producto al carrito: ' + (data.message || 'Error desconocido'));
                    });
                }
            }).catch(error => {
                console.error('Error en la solicitud:', error);
                alert('Hubo un problema al procesar la solicitud.');
            });
        } else {
            alert("Seleccione al menos 1 unidad para agregar al carrito.");
        }
    }
</script>

@model IEnumerable<PetApp_Empresa.Models.Accesorio>

@{
    ViewData["Title"] = "Tienda de Accesorios";
}

<div class="container py-4 animate-page">
    <!-- Título con animación -->
    <div class="text-center mb-4">
        <h1 class="display-5 fw-bold text-gradient animate-title">@ViewData["Title"]</h1>
        <p class="lead text-muted animate-subtitle">
            Explora nuestra selección de accesorios para tus mascotas y llena tu carrito.
        </p>
    </div>

    <!-- Carrito -->
    <div class="text-end mb-3">
        <a href="@Url.Action("ResumenCarrito", "CarritoDeCompras")" class="btn btn-carrito shadow-sm animate-cart">
            <i class="fas fa-shopping-cart me-2"></i>Carrito <span id="carrito-count" class="badge bg-light text-dark">0</span>
        </a>
    </div>

    <!-- Tarjetas -->
    <div class="row g-4">
        @foreach (var accesorio in Model)
        {
            <div class="col-md-6 col-lg-4 animate-card">
                <div class="card shadow-sm border-0 h-100">
                    @if (!string.IsNullOrEmpty(accesorio.ImagenUrl))
                    {
                        <img src="@accesorio.ImagenUrl" class="card-img-top img-fluid" alt="Imagen del accesorio" style="height: 200px; object-fit: cover;" />
                    }
                    else
                    {
                        <div class="d-flex justify-content-center align-items-center bg-light" style="height: 200px;">
                            <span class="text-muted">Sin imagen</span>
                        </div>
                    }
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title fw-bold text-guindo">@accesorio.Nombre</h5>
                        <p class="card-text text-secondary">@accesorio.Descripcion</p>
                        <p class="mb-2">
                            <strong class="text-secondary">Precio:</strong> <span class="text-success">@accesorio.Precio.ToString("C")</span>
                        </p>
                        <p class="mb-2">
                            <strong class="text-secondary">Disponible:</strong>
                            <span id="stock-@accesorio.AccesorioId" class="@((accesorio.CantidadDisponible == 0) ? "text-danger" : "text-success")">
                                @(accesorio.CantidadDisponible > 0 ? accesorio.CantidadDisponible.ToString() : "Agotado")
                            </span>
                        </p>
                        @if (accesorio.CantidadDisponible > 0)
                        {
                            <div class="mt-auto">
                                <div class="input-group mb-2">
                                    <button class="btn btn-outline-guindo" onclick="ajustarCantidad(@accesorio.AccesorioId, -1)">-</button>
                                    <input type="text" id="cantidad-@accesorio.AccesorioId" class="form-control text-center" value="0" readonly>
                                    <button class="btn btn-outline-guindo" onclick="ajustarCantidad(@accesorio.AccesorioId, 1)">+</button>
                                </div>
                                <button class="btn btn-guindo w-100" onclick="agregarAlCarrito(@accesorio.AccesorioId)">
                                    <i class="fas fa-cart-plus me-2"></i>Agregar al carrito
                                </button>
                            </div>
                        }
                        else
                        {
                            <button class="btn btn-danger w-100 mt-auto" disabled>
                                <i class="fas fa-ban me-2"></i>Agotado
                            </button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Script para manejo de cantidad y carrito -->
<script>
    // Manejo de la cantidad
    function ajustarCantidad(accesorioId, delta) {
        const cantidadInput = document.getElementById(`cantidad-${accesorioId}`);
        let cantidad = parseInt(cantidadInput.value) || 0;
        cantidad = Math.max(0, cantidad + delta); // Evitar valores negativos
        cantidadInput.value = cantidad;
    }

    // Agregar al carrito
    function agregarAlCarrito(accesorioId) {
        const cantidad = parseInt(document.getElementById(`cantidad-${accesorioId}`).value) || 0;

        if (cantidad > 0) {
            fetch(`/CarritoDeCompras/AgregarAlCarrito`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ accesorioId, cantidad })
            })
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        throw new Error('Error al agregar al carrito');
                    }
                })
                .then(data => {
                    alert(data.message);
                    actualizarCarrito();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Ocurrió un error al agregar el producto al carrito.');
                });
        } else {
            alert('Seleccione al menos una unidad para agregar al carrito.');
        }
    }

    // Actualizar la cantidad de elementos en el carrito
    function actualizarCarrito() {
        fetch('/CarritoDeCompras/ObtenerCantidadElementosCarrito')
            .then(response => response.json())
            .then(data => {
                document.getElementById("carrito-count").innerText = data.cantidad;
            })
            .catch(error => {
                console.error('Error al actualizar el carrito:', error);
            });
    }

    // Inicialización
    document.addEventListener('DOMContentLoaded', () => {
        actualizarCarrito();
    });
</script>

<!-- Estilos personalizados -->
<style>
    .btn-guindo {
        background-color: #800020;
        color: #fff;
        border-radius: 6px;
        font-weight: bold;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .btn-guindo:hover {
            transform: scale(1.05);
            box-shadow: 0px 6px 15px rgba(128, 0, 32, 0.5);
        }

    .btn-outline-guindo {
        border-color: #800020;
        color: #800020;
    }

        .btn-outline-guindo:hover {
            background-color: #800020;
            color: #fff;
        }

    .text-guindo {
        color: #800020;
    }

    .btn-carrito {
        background-color: #800020;
        color: #fff;
        font-weight: bold;
    }

        .btn-carrito:hover {
            transform: scale(1.05);
            box-shadow: 0px 6px 15px rgba(128, 0, 32, 0.5);
        }
</style>
